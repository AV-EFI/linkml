class _LinkmlPanderaValidator:
    @classmethod
    def _check_cardinality(cls, df, column_name, min_cardinality : int=None, max_cardinality : int=None):
        min_expr = (nw.col('count') >= min_cardinality)
        max_expr = (nw.col('count') <= max_cardinality)

        if min_cardinality is not None:
            if max_cardinality is not None:
                combined_expression = (min_expr and max_expr).all()
            else:
                combined_expression = min_expr.all()
        else:
            combined_expression = max_expr.all()

        df = (
            nw.from_native(df)
            .group_by(column_name)
            .agg(
                nw.col(column_name).count().alias('count')
            )
            .select(combined_expression)
            .to_native()
        )

        return df

    @classmethod
    def _check_nested_struct(cls, pandera_model: pla.DataFrameModel, data: PolarsData):
        """Use this in a custom check. Pass the nested model as pandera_model.
        """
        try:
            unnested_column = data.lazyframe.select(data.key).unnest(data.key)
        except Exception as e:
            unnested_column = data.lazyframe.collect().select(pl.col(data.key).explode()).lazy().unnest(data.key)

        pandera_model.validate(unnested_column)

        return True
