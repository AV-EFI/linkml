{% macro validator(name, pattern, pydantic_ver=2) %}
{% if pydantic_ver == 1 %}
    {%- if pattern %}
@validator('{{name}}', allow_reuse=True)
    def pattern_{{name}}(cls, v):
        pattern=re.compile(r"{{pattern}}")
        if isinstance(v,list):
            for element in v:
                if not pattern.match(element):
                    raise ValueError(f"Invalid {{name}} format: {element}")
        elif isinstance(v,str):
            if not pattern.match(v):
                raise ValueError(f"Invalid {{name}} format: {v}")
        return v
    {% endif -%}
{%- else -%}
    {%- if pattern %}
@field_validator('{{name}}')
    def pattern_{{name}}(cls, v):
        pattern=re.compile(r"{{pattern}}")
        if isinstance(v,list):
            for element in v:
                if not pattern.match(element):
                    raise ValueError(f"Invalid {{name}} format: {element}")
        elif isinstance(v,str):
            if not pattern.match(v):
                raise ValueError(f"Invalid {{name}} format: {v}")
        return v
    {% endif -%}
{% endif -%}
{% endmacro %}